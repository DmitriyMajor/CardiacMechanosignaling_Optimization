% NetfluxODE_CaoS_run.m
 % Automatically generated by Netflux on 17-May-2025
 % Adjusted and Expanded by Dmitriy Major
 % Last Update: 05/25/2025


%% Initialize
 close all
 clc
 clear all

%% Loading Data
% === User-defined targets and input toggle ===
targets = {'gene_Lmcd1', 'gene_Nfkbia', 'gene_Csrp3', 'gene_Jun', 'gene_Ttn', 'gene_Itgb1', 'gene_Fhl1'};
S_in = [0.315, 0.7, 0.4]; % Stretch Inputs (SS, Longitudinal, Transverse)

% === Load parameters ===
[params, y0] = NetfluxODE_CaoS_loadParams();
[rpar, tau, ymax, speciesNames, speciesTypes] = params{:};

% Import RNA Data
[y0_MA, y30m_MA, y30m_MA_trans, y4h_MA, y4h_MA_trans, matchedGeneNames] = ImportRNA_CaoS(speciesNames, speciesTypes, y0);

% Identify Stimulus and Gene indices
stimIdx = find(strcmp(speciesNames, 'Stretch'));
geneIdx = find(contains(speciesTypes, 'Gene'));
targetGeneIdx = find(ismember(speciesNames, targets));
count_sig = 85; % When Genes Start (MATLAB)

% Defining Time-Scale
tspan = 0:0.1:(24*60); % used for 4hr simulation
tspan1 = [0 30000]; % used for steady state simulation

%% Steady State Simulation
rpar(1,1) = 1; % Set w1 to intial stimulus as necessary
params{1} = rpar;
[t1, y1] = ode15s(@NetfluxODE_CaoS, tspan1, y0, [], params, S_in(1));
ss = y1(end, :)'; % End ouputs from SS model


%% Longitudinal Stretch Simulation

rpar(1,1) = 1; % Set w1 to 1.0
params{1} = rpar;
y0_new = ss; % Setting new inputs to outputs of SS simulation

y0_new(stimIdx) = S_in(2);
[t2, y2] = ode15s(@NetfluxODE_CaoS, tspan, y0_new, [], params, S_in(2));

% Normalize longitudinal outputs by steady state
y2norm = y2;
y2norm(:, geneIdx) = y2(:, geneIdx) ./ ss(geneIdx)';
ylong_4h = y2norm(end, :);
ylong_30m = y2norm(find(t2 >= 30, 1), :)';

%% Transverse Stretch Simulation

y0_new(stimIdx) = S_in(3);
[t3, y3] = ode15s(@NetfluxODE_CaoS, tspan, y0_new, [], params, S_in(3));

% Normalize transverse outputs by steady state
y3norm = y3;
y3norm(:, geneIdx) = y3(:, geneIdx) ./ ss(geneIdx)';
ytrans_4h = y3norm(end, :);
ytrans_30m = y3norm(find(t3 >= 30, 1), :)';



%% Plots: Gene Time-Courses

% Plot 1: Steady State
figure;
plot(log10(t1), y1(:, [stimIdx, targetGeneIdx]), 'LineWidth', 1.5);
hold on
xline(log10(30), '--', 'LineWidth', 1.5)
xline(log10(240), '--', 'LineWidth', 1.5)
xlabel('log_{10}(Time) (min)');
ylabel('Fractional Species Activation');
title(sprintf('Steady State Model Evaluation: Control Stretch = %.3f', S_in(1)));
legend(speciesNames([stimIdx, targetGeneIdx]), 'Interpreter', 'none', 'Location', 'best');
grid on;

% Plot 2: Longitudinal Stretch
figure;
plot(log10(t2), y2(:, [stimIdx, targetGeneIdx]), 'LineWidth', 1.5);
xline(log10(30), '--', 'LineWidth', 1.5)
xline(log10(240), '--', 'LineWidth', 1.5)
xlabel('log_{10}(Time) (min)');
ylabel('Fractional Species Activation');
title(sprintf('Activated Model Evaluation: Longitudinal Stretch = %.3f', S_in(2)));
legend(speciesNames([stimIdx, targetGeneIdx]), 'Interpreter', 'none', 'Location', 'best');
grid on;

% Plot 3: Transverse Stretch
figure;
plot(log10(t3), y3(:, [stimIdx, targetGeneIdx]), 'LineWidth', 1.5);
hold on
xline(log10(30), '--', 'LineWidth', 1.5)
xline(log10(240), '--', 'LineWidth', 1.5)
xlabel('log_{10}(Time) (min)');
ylabel('Fractional Species Activation');
title(sprintf('Activated Model Evaluation: Transverse Stretch = %.3f', S_in(3)));
legend(speciesNames([stimIdx, targetGeneIdx]), 'Interpreter', 'none', 'Location', 'best');


%% Plots: Normalized (FC) Timecourses

% Plot: Normalized Longitudinal Gene Outputs
maxp = max(y2norm(:, ismember(geneIdx, targetGeneIdx)), [], 'all');
minp = min(y2norm(:, ismember(geneIdx, targetGeneIdx)), [], 'all');

figure;
xlim([log10(t2(1)) log10(t2(end))])
ylim([minp-0.3 maxp+0.3])
hold on
plot(log10(t2), y2norm(:, targetGeneIdx), 'LineWidth', 1.5);
xline(log10(30), '--', 'LineWidth', 1.5)
xline(log10(240), '--', 'LineWidth', 1.5)
yline(sqrt(2), 'b--', 'LineWidth', 1.5)
yline(1/sqrt(2), 'b--', 'LineWidth', 1.5)
xlabel('log_{10}(Time) (min)');
ylabel('Normalized Gene Expression');
title(sprintf('Normalized Gene Activity: Longitudinal Stretch = %.1f', S_in(2)));
legend(speciesNames(targetGeneIdx), 'Interpreter', 'none', 'Location', 'best');

% Plot: Normalized Transverse Gene Outputs
maxp = max(y3norm(:, ismember(geneIdx, targetGeneIdx)), [], 'all');
minp = min(y3norm(:, ismember(geneIdx, targetGeneIdx)), [], 'all');

figure;
xlim([log10(t3(1)) log10(t3(end))])
ylim([minp-0.3 maxp+0.3])
hold on
plot(log10(t3), y3norm(:, targetGeneIdx), 'LineWidth', 1.5);
xline(log10(30), '--', 'LineWidth', 1.5)
xline(log10(240), '--', 'LineWidth', 1.5)
yline(sqrt(2), 'b--', 'LineWidth', 1.5)
yline(1/sqrt(2), 'b--', 'LineWidth', 1.5)
xlabel('log_{10}(Time) (min)');
ylabel('Normalized Gene Expression');
title(sprintf('Normalized Gene Activity: Transverse Stretch = %.1f', S_in(3)));
legend(speciesNames(targetGeneIdx), 'Interpreter', 'none', 'Location', 'best');

% % Plot: Concatenated Comparison
% figure;
% semilogx(t1, y1(:, targetGeneIdx), '--', t2, y2(:, targetGeneIdx), '-');
% hold on
% xline(log10(30), '--', 'LineWidth', 1.5)
% xline(log10(240), '--', 'LineWidth', 1.5)
% xlabel('log_{10}(Time) (min)');
% ylabel('Fractional Species Activation');
% title('Comparison: Basal vs. Longitudinal Stretch');
% legend([strcat(speciesNames(targetGeneIdx), '_basal'), strcat(speciesNames(targetGeneIdx), '_stretch')], 'Interpreter', 'none', 'Location', 'best');

%% Matching to RNA Raw Data
% Map matchedGeneNames to indices in speciesNames
[~, matchedGeneIdx] = ismember(matchedGeneNames, speciesNames);

% Parsing for upstream reactant totals
[oneTF, twoTF, multiTF] = ...
 ParseGeneTFInputs_CaoS(geneIdx);

% Define colors for each TF group
colors = {'b', 'g', 'm'};  % blue, green, magenta

%% Bar Graph: Upstream Rxn Tot.

% Counts for each TF category
counts = [numel(oneTF), numel(twoTF), numel(multiTF)];

% Category labels
categories = {'One Regulator', 'Two Regulators', 'Three+ Regulators'};

% Create bar graph
figure;
b = bar(counts);

% Set bar colors individually
for k = 1:length(counts)
    b.FaceColor = 'flat';    % enable individual bar coloring
    b.CData(k, :) = reshape(sscanf(colors{k}, '%c'), 1, []); % workaround - use RGB instead (below)
end

% Since setting color from char wonâ€™t work directly, convert colors to RGB:
colorRGB = [0 0 1; 0 0.5 0; 1 0 1]; % blue, green, magenta
for k = 1:length(counts)
    b.CData(k, :) = colorRGB(k, :);
end

% Customize axes
set(gca, 'XTickLabel', categories, 'FontSize', 12)
ylabel('Number of Genes')
title('Upstream Regulator Count vs Gene Expression')
grid on

% Add count labels on top of bars
xtips = b.XEndPoints;
ytips = b.YEndPoints;
labels = string(counts);
text(xtips, ytips, labels, 'HorizontalAlignment','center', 'VerticalAlignment','bottom', 'FontSize',12)
%% Scatterplot 1: 4 hour Stretch

z = 4; % bounds for axes

figure('Position', [100, 100, 1600, 600])

% Subplot 1: Longitudinally Stretched (4h)
subplot(1,2,1)
x_data = log2(ylong_4h);
y_data = log2(y4h_MA);

% Scatter plot
hold on

% Plot each TF group separately with different colors
scatter(x_data(oneTF), y_data(oneTF), 20, colors{1}, 'filled')
scatter(x_data(twoTF), y_data(twoTF), 20, colors{2}, 'filled')
scatter(x_data(multiTF), y_data(multiTF), 20, colors{3}, 'filled')

% Plot identity line
plot(-z:0.1:z, -z:0.1:z, 'k--', 'LineWidth', 2) 

% Linear regression (least squares fit)
m = dot(x_data, y_data) / dot(x_data, x_data);
x_fit = linspace(-z, z, 100);
y_fit = m * x_fit;
plot(x_fit, y_fit, 'r--', 'LineWidth', 1)

% Pearson correlation coefficient
R = corrcoef(x_data, y_data);
r_val = R(1,2);
r_squared = r_val^2;

% Axis labels, title
xlabel('Model Predicted Log2 Fold-Change')
ylabel('RNA Data Log2 Fold-Change')
title('Longitudinally Stretched Log2 Fold-Change (4h)')
xlim([-z z])
ylim([-z z])
grid on

% Legend with regression and Pearson stats
legend({...
    'One Regulator', ...
    'Two Regulators', ...
    'Three+ Regulators', ...
    'Unity Line', ...
    sprintf('Best Fit: y = %.2fx\nR^2 = %.2f', m, r_squared)}, ...
    'Location', 'best')

hold off

% Subplot 2: Transverse Stretched (4h)
subplot(1,2,2)
x_data = log2(ytrans_4h);
y_data = log2(y4h_MA_trans);

xd1 = x_data;
yd1 = y_data;

% Scatter plot
hold on

% Plot each TF group separately with different colors
scatter(x_data(oneTF), y_data(oneTF), 20, colors{1}, 'filled')
scatter(x_data(twoTF), y_data(twoTF), 20, colors{2}, 'filled')
scatter(x_data(multiTF), y_data(multiTF), 20, colors{3}, 'filled')

% Plot identity line
plot(-z:0.1:z, -z:0.1:z, 'k--', 'LineWidth', 2) 

% Linear regression (least squares fit)
m = dot(x_data, y_data) / dot(x_data, x_data);
x_fit = linspace(-z, z, 100);
y_fit = m * x_fit;
plot(x_fit, y_fit, 'r--', 'LineWidth', 1)

% Pearson correlation coefficient
R = corrcoef(x_data, y_data);
r_val = R(1,2);
r_squared = r_val^2;


% Axis labels, title
xlabel('Model Predicted Log2 Fold-Change')
ylabel('RNA Data Log2 Fold-Change')
title('Transverse Stretched Log2 Fold-Change (4h)')
xlim([-z z])
ylim([-z z])
grid on

% Legend with regression and Pearson stats
legend({...
    'One Regulator', ...
    'Two Regulators', ...
    'Three+ Regulators', ...
    'Unity Line', ...
    sprintf('Best Fit: y = %.2fx\nR^2 = %.2f', m, r_squared)}, ...
    'Location', 'best')

hold off

sgtitle('RNA-Seq Data vs Model Predicted Fold-Change (4 hr. Activation)')



%% Scatterplot 2: 30 min Stretch

figure('Position', [100, 100, 1600, 600])

% Subplot 1: Longitudinally Stretched (4h)
subplot(1,2,1)
x_data = log2(ylong_30m);
y_data = log2(y30m_MA);


% Scatter plot
hold on

% Plot each TF group separately with different colors
scatter(x_data(oneTF), y_data(oneTF), 20, colors{1}, 'filled')
scatter(x_data(twoTF), y_data(twoTF), 20, colors{2}, 'filled')
scatter(x_data(multiTF), y_data(multiTF), 20, colors{3}, 'filled')
% Plot identity line
plot(-z:0.1:z, -z:0.1:z, 'k--', 'LineWidth', 2) 

% Linear regression (least squares fit)
m = dot(x_data, y_data) / dot(x_data, x_data);
x_fit = linspace(-z, z, 100);
y_fit = m * x_fit;
plot(x_fit, y_fit, 'r--', 'LineWidth', 1)

% Pearson correlation coefficient
R = corrcoef(x_data, y_data);
r_val = R(1,2);
r_squared = r_val^2;


% Axis labels, title
xlabel('Model Predicted Log2 Fold-Change')
ylabel('RNA Data Log2 Fold-Change')
title('Longitudinally Stretched Log2 Fold-Change (30m)')
xlim([-z z])
ylim([-z z])
grid on

% Legend with regression and Pearson stats
legend({...
    'One Regulator', ...
    'Two Regulators', ...
    'Three+ Regulators', ...
    'Unity Line', ...
    sprintf('Best Fit: y = %.2fx\nR^2 = %.2f', m, r_squared)}, ...
    'Location', 'best')

hold off

% Subplot 2: Transverse Stretched (4h)
subplot(1,2,2)
x_data = log2(ytrans_30m);
y_data = log2(y30m_MA_trans);

% Scatter plot
hold on

% Plot each TF group separately with different colors
scatter(x_data(oneTF), y_data(oneTF), 20, colors{1}, 'filled')
scatter(x_data(twoTF), y_data(twoTF), 20, colors{2}, 'filled')
scatter(x_data(multiTF), y_data(multiTF), 20, colors{3}, 'filled')

% Plot identity line
plot(-z:0.1:z, -z:0.1:z, 'k--', 'LineWidth', 2) 

% Linear regression (least squares fit)
m = dot(x_data, y_data) / dot(x_data, x_data);
x_fit = linspace(-z, z, 100);
y_fit = m * x_fit;
plot(x_fit, y_fit, 'r--', 'LineWidth', 1)

% Pearson correlation coefficient
R = corrcoef(x_data, y_data);
r_val = R(1,2);
r_squared = r_val^2;


% Axis labels, title
xlabel('Model Predicted Log2 Fold-Change')
ylabel('RNA Data Log2 Fold-Change')
title('Transverse Stretched Log2 Fold-Change (30m)')
xlim([-z z])
ylim([-z z])
grid on

% Legend with regression and Pearson stats
legend({...
    'One Regulator', ...
    'Two Regulators', ...
    'Three+ Regulators', ...
    'Unity Line', ...
    sprintf('Best Fit: y = %.2fx\nR^2 = %.2f', m, r_squared)}, ...
    'Location', 'best')

hold off

sgtitle('RNA-Seq Data vs Model Predicted Fold-Change (30 min Activation)')

%% Testing Parameter Changes

rpar(3, 124:907) = 0.45; %changing EC50 for all gene terms
params{1} = rpar;
[t4, y4] = ode15s(@NetfluxODE_CaoS, tspan, y0_new, [], params, S_in(2));

% Normalize longitudinal outputs by steady state
y4norm = y4;
y4norm(:, geneIdx) = y4(:, geneIdx) ./ ss(geneIdx)';
ylong_4h = y4norm(end, :);
ylong_30m = y4norm(find(t4 >= 30, 1), :)';


[t5, y5] = ode15s(@NetfluxODE_CaoS, tspan, y0_new, [], params, S_in(3));

% Normalize transverse outputs by steady state
y5norm = y5;
y5norm(:, geneIdx) = y5(:, geneIdx) ./ ss(geneIdx)';
ytrans_4h = y5norm(end, :);
ytrans_30m = y5norm(find(t5 >= 30, 1), :)';


%% Scatterplot 1: 4 hour Stretch

z = 4; % bounds for axes

figure('Position', [100, 100, 1600, 600])

% Subplot 1: Transverse Stretched (4h), EC50 Changed
subplot(1,2,1)
x_data = log2(ytrans_4h);
y_data = log2(y4h_MA_trans);

% Scatter plot
hold on

% Plot each TF group separately with different colors
scatter(x_data(oneTF), y_data(oneTF), 20, colors{1}, 'filled')
scatter(x_data(twoTF), y_data(twoTF), 20, colors{2}, 'filled')
scatter(x_data(multiTF), y_data(multiTF), 20, colors{3}, 'filled')

% Plot identity line
plot(-z:0.1:z, -z:0.1:z, 'k--', 'LineWidth', 2) 

% Linear regression (least squares fit)
m = dot(x_data, y_data) / dot(x_data, x_data);
x_fit = linspace(-z, z, 100);
y_fit = m * x_fit;
plot(x_fit, y_fit, 'r--', 'LineWidth', 1)

% Pearson correlation coefficient
R = corrcoef(x_data, y_data);
r_val = R(1,2);
r_squared = r_val^2;

% Axis labels, title
xlabel('Model Predicted Log2 Fold-Change')
ylabel('RNA Data Log2 Fold-Change')
title('Changed: Transverse Stretched Log2 Fold-Change (4h), EC50 = 0.45')
xlim([-z z])
ylim([-z z])
grid on

% Legend with regression and Pearson stats
legend({...
    'One Regulator', ...
    'Two Regulators', ...
    'Three+ Regulators', ...
    'Unity Line', ...
    sprintf('Best Fit: y = %.2fx\nR^2 = %.2f', m, r_squared)}, ...
    'Location', 'best')

hold off

% Subplot 2: Transverse Stretched (4h), Original EC50
subplot(1,2,2)

% Scatter plot
hold on

% Plot each TF group separately with different colors
scatter(xd1(oneTF), yd1(oneTF), 20, colors{1}, 'filled')
scatter(xd1(twoTF), yd1(twoTF), 20, colors{2}, 'filled')
scatter(xd1(multiTF), yd1(multiTF), 20, colors{3}, 'filled')

% Plot identity line
plot(-z:0.1:z, -z:0.1:z, 'k--', 'LineWidth', 2) 

% Linear regression (least squares fit)
m = dot(xd1, yd1) / dot(xd1, xd1);
x_fit = linspace(-z, z, 100);
y_fit = m * x_fit;
plot(x_fit, y_fit, 'r--', 'LineWidth', 1)

% Pearson correlation coefficient
R = corrcoef(xd1, yd1);
r_val = R(1,2);
r_squared = r_val^2;


% Axis labels, title
xlabel('Model Predicted Log2 Fold-Change')
ylabel('RNA Data Log2 Fold-Change')
title('Original: Transverse Stretched Log2 Fold-Change (4h), EC50 = 0.5')
xlim([-z z])
ylim([-z z])
grid on

% Legend with regression and Pearson stats
legend({...
    'One Regulator', ...
    'Two Regulators', ...
    'Three+ Regulators', ...
    'Unity Line', ...
    sprintf('Best Fit: y = %.2fx\nR^2 = %.2f', m, r_squared)}, ...
    'Location', 'best')

hold off

sgtitle('4hr Transverse Stretch, Comparing EC50 Changes')
