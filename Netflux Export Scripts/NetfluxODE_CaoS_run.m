% NetfluxODE_CaoS_run.m
 % Automatically generated by Netflux on 17-May-2025
 % Adjusted and Expanded by Dmitriy Major
 % Last Update: 06/17/2025


%% Initialize
 close all
 clc
 clear variables

%% Loading Data
% === User-defined targets and input toggle ===
targets = {'gene_Cxcr7', 'gene_Map3k8', 'gene_Ccna2', 'gene_Adamts9', 'gene_Magi1', 'gene_Nr4a3', 'gene_Fgfr2', 'gene_Per1', 'gene_Csrp3', 'gene_Lmcd1'};
S_in = [0.315, 0.7, 0.4, 0.398]; % Stretch Inputs (SS, Longitudinal, Transverse, New Baseline)

% === Load parameters ===
[params, y0] = NetfluxODE_CaoS_loadParams();
[rpar, tau, ymax, speciesNames, speciesTypes] = params{:};

% Import RNA Data
[y0_MA, y30m_MA, y30m_MA_trans, y4h_MA, y4h_MA_trans, ...
          p4hlong, p4htrans, p30mlong, p30mtrans, q4hlong, q4htrans, q30mlong, q30mtrans, ...
          DE_Long_ind, DE_Trans_ind, DE_Both_ind, DEG_nodes, unDEG, DE_long4h_ind, DE_4h_more, matchedGeneNames] = ...
          ImportRNA_CaoS(speciesNames, speciesTypes, y0);

% Identify Stimulus and Gene indices
stimIdx = find(strcmp(speciesNames, 'Stretch'));
geneIdx = find(contains(speciesTypes, 'Gene'));
targetGeneIdx = find(ismember(speciesNames, targets));
count_sig = 85; % When Genes Start (MATLAB)
% validatedIdx = getValidatedGeneIdx(speciesNames, geneIdx);
validatedIdx = 85:654;

% Defining Time-Scale
tspan = 0:0.1:(24*60); % used for 4hr simulation
tspan1 = [0 30000]; % used for steady state simulation

%% Defining Differentially-Expressed Gene Species

y4h_norm = y4h_MA./y0_MA;
% y4h_trans_norm = y4h_MA_trans./y0_MA;
% y30m_norm = y30m_MA./y0_MA;
% y30m_trans_norm = y30m_MA_trans./y0_MA;

%% Steady State Simulation
rpar(1,1) = 1; % Set w1 to intial stimulus as necessary
params{1} = rpar;
[t1, y1] = ode15s(@NetfluxODE_CaoS, tspan1, y0, [], params, S_in(1));
ss = y1(end, :)'; % End ouputs from SS model
ss2 = ss;

%% Longitudinal Stretch Simulation

rpar(1,1) = 1; % Set w1 to 1.0
params{1} = rpar;

% Stimulation of Longitudinal Stretch Using mRNA Exp. Base Counts (Y0)
y0_new = zeros(1, length(speciesNames)); % Setting new inputs to outputs of SS simulation
for i = 1:length(speciesNames)
    if i < count_sig
        y0_new(i) = ss(i);
    else
        y0_new(i) = y0_MA(i);
    end
end

y0_new(stimIdx) = S_in(1);
[t2, y2] = ode15s(@NetfluxODE_CaoS, tspan, y0_new, [], params, S_in(2));

% Standard Simulation at S = 0.7 following SS w/out mRNA Base Counts
y0_new3 = ss;
y0_new3(stimIdx) = S_in(1);
[t2b, y2b] = ode15s(@NetfluxODE_CaoS, tspan, y0_new3, [], params, S_in(2));
[ylong_4h, ylong_30m, y2norm] = ODENorm(t2b, y2b, ss, geneIdx);

% Normalize longitudinal outputs by steady state
% [ylong_4h, ylong_30m, y2norm] = ODENorm(t2, y2, ss, geneIdx);
sigIdxlong = GetSigGeneIdx_CaoS(ylong_4h, geneIdx);



%% Transverse Stretch Simulation
% y0_new = zeros(1, length(speciesNames)); % Setting new inputs to outputs of SS simulation
% for i = 1:length(speciesNames)
%     if i < count_sig
%         y0_new(i) = ss(i);
%     else
%         y0_new(i) = y0_MA(i);
%     end
% end
% y0_new(stimIdx) = S_in(3);
% [t3, y3] = ode15s(@NetfluxODE_CaoS, tspan, y0_new, [], params, S_in(3));
% 
% % Normalize transverse outputs by steady state
% [ytrans_4h, ytrans_30m, y3norm] = ODENorm(t3, y3, ss, geneIdx);
% sigIdxtrans = GetSigGeneIdx_CaoS(ytrans_4h, geneIdx);


%% Plots: Gene Time-Courses

% Plot 1: Steady State
figure;
subplot (1, 2, 1)
plot(log10(t1), y1(:, [stimIdx, targetGeneIdx]), 'LineWidth', 1.5);
hold on
xline(log10(30), '--', 'LineWidth', 1.5)
xline(log10(240), '--', 'LineWidth', 1.5)
xlabel('log_{10}(Time) (min)');
ylabel('Fractional Species Activation');
title(sprintf('Steady State Model Evaluation: Control Stretch = %.3f', S_in(1)));
legend(speciesNames([stimIdx, targetGeneIdx]), 'Interpreter', 'none', 'Location', 'northwest');
grid on;
xlim([log10(t1(1)) log10(t1(end))]);

% Plot 2: Longitudinal Stretch
subplot(1, 2, 2)
plot(log10(t2b), y2b(:, [stimIdx, targetGeneIdx]), 'LineWidth', 1.5);
xline(log10(30), '--', 'LineWidth', 1.5)
xline(log10(240), '--', 'LineWidth', 1.5)
xlabel('log_{10}(Time) (min)');
ylabel('Fractional Species Activation');
title(sprintf('Activated Model Evaluation: Longitudinal Stretch = %.3f', S_in(2)));
legend(speciesNames([stimIdx, targetGeneIdx]), 'Interpreter', 'none', 'Location', 'northwest');
grid on;
xlim([log10(t2b(1)) log10(t2b(end))]);

sgtitle('Steady State and Activated Model Output (Longitudinal Stretch)')

% Plot 3: Transverse Stretch
% figure;
% plot(log10(t3), y3(:, [stimIdx, targetGeneIdx]), 'LineWidth', 1.5);
% hold on
% xline(log10(30), '--', 'LineWidth', 1.5)
% xline(log10(240), '--', 'LineWidth', 1.5)
% xlabel('log_{10}(Time) (min)');
% ylabel('Fractional Species Activation');
% title(sprintf('Activated Model Evaluation: Transverse Stretch = %.3f', S_in(3)));
% legend(speciesNames([stimIdx, targetGeneIdx]), 'Interpreter', 'none', 'Location', 'best');


%% Plots: Normalized (FC) Timecourses

% Plot: Normalized Longitudinal Gene Outputs
maxp = real(max(y2norm(:, targetGeneIdx), [], 'all'));
minp = real(min(y2norm(:, targetGeneIdx), [], 'all'));

figure;
xlim([log10(t2b(1)) log10(t2b(end))])
ylim([minp-0.15 maxp+0.15])
hold on
plot(log10(t2b), y2norm(:, targetGeneIdx), 'LineWidth', 1.5);
xline(log10(30), '--', 'LineWidth', 1.5)
xline(log10(240), '--', 'LineWidth', 1.5)
yline(sqrt(2), 'b--', 'LineWidth', 1.5)
yline(1/sqrt(2), 'b--', 'LineWidth', 1.5)
xlabel('log_{10}(Time) (min)');
ylabel('Normalized Gene Expression');
title(sprintf('Normalized Gene Activity: Longitudinal Stretch = %.3f', S_in(2)));
legend(speciesNames(targetGeneIdx), 'Interpreter', 'none', 'Location', 'best');

% Plot: Normalized Transverse Gene Outputs
% maxp = real(max(y3norm(:, targetGeneIdx), [], 'all'));
% minp = real(min(y3norm(:, targetGeneIdx), [], 'all'));
% 
% figure;
% xlim([log10(t3(1)) log10(t3(end))])
% ylim([minp-0.15 maxp+0.15])
% hold on
% plot(log10(t3), y3norm(:, targetGeneIdx), 'LineWidth', 1.5);
% xline(log10(30), '--', 'LineWidth', 1.5)
% xline(log10(240), '--', 'LineWidth', 1.5)
% yline(sqrt(2), 'b--', 'LineWidth', 1.5)
% yline(1/sqrt(2), 'b--', 'LineWidth', 1.5)
% xlabel('log_{10}(Time) (min)');
% ylabel('Normalized Gene Expression');
% title(sprintf('Normalized Gene Activity: Transverse Stretch = %.1f', S_in(3)));
% legend(speciesNames(targetGeneIdx), 'Interpreter', 'none', 'Location', 'best');

% % Plot: Concatenated Comparison
% figure;
% semilogx(t1, y1(:, targetGeneIdx), '--', t2, y2(:, targetGeneIdx), '-');
% hold on
% xline(log10(30), '--', 'LineWidth', 1.5)
% xline(log10(240), '--', 'LineWidth', 1.5)
% xlabel('log_{10}(Time) (min)');
% ylabel('Fractional Species Activation');
% title('Comparison: Basal vs. Longitudinal Stretch');
% legend([strcat(speciesNames(targetGeneIdx), '_basal'), strcat(speciesNames(targetGeneIdx), '_stretch')], 'Interpreter', 'none', 'Location', 'best');

%% Matching to RNA Raw Data
% Map matchedGeneNames to indices in speciesNames
[~, matchedGeneIdx] = ismember(matchedGeneNames, speciesNames);

% Parsing for upstream reactant totals
[oneTF, twoTF, multiTF] = ...
 ParseGeneTFInputs_CaoS(geneIdx);

% Parsing for significance (|log2FC| > 0.5)
sig_oneTF_long = intersect(sigIdxlong, oneTF);



% Define colors for each TF group
colors = {'b', 'g', 'm'};  % blue, green, magenta

%% Bar Graph: Upstream Rxn Tot.

% Counts for each TF category
counts = [numel(oneTF), numel(twoTF), numel(multiTF)];

% Category labels
categories = {'One Regulator', 'Two Regulators', 'Three+ Regulators'};

% Create bar graph
figure;
b = bar(counts);

% Set bar colors individually
for k = 1:length(counts)
    b.FaceColor = 'flat';    % enable individual bar coloring
    b.CData(k, :) = reshape(sscanf(colors{k}, '%c'), 1, []); % workaround - use RGB instead (below)
end

% Since setting color from char wonâ€™t work directly, convert colors to RGB:
colorRGB = [0 0 1; 0 0.5 0; 1 0 1]; % blue, green, magenta
for k = 1:length(counts)
    b.CData(k, :) = colorRGB(k, :);
end

% Customize axes
set(gca, 'XTickLabel', categories, 'FontSize', 12)
ylabel('Number of Genes')
title('Upstream Regulator Count vs Gene Expression')
grid on

% Add count labels on top of bars
xtips = b.XEndPoints;
ytips = b.YEndPoints;
labels = string(counts);
text(xtips, ytips, labels, 'HorizontalAlignment','center', 'VerticalAlignment','bottom', 'FontSize',12)


%% Scatterplot 1: Longitudinal Stretch

z = [0, 20]; % bounds for axes

figure('Position', [100, 100, 1600, 600])


% Subplot 1: Longitudinally Stretched (4h): mRNA Base Counts
subplot(1,2,2)
% y_data = log2(y2(find(t2 >= 240, 1), :));
% x_data = log2(y4h_MA)';
y_data = log2(ylong_4h.*y0_MA);
x_data = log2(y4h_MA);

% 1) Compute error vectors
err = y_data - x_data;           % signed error
abs_err = abs(err);              % absolute error
sq_err  = err.^2;                % squared error

% 2) Compute metrics
% MAE  = mean(abs_err);            % Mean absolute error
% RMSE = sqrt( mean(sq_err) );     % Root-mean-square error
% 
% % display in command window
% fprintf('Mean Absolute Error (log2FC)  = %.4f\n', MAE);
% fprintf('RMS Error (log2FC) = %.4f\n', RMSE);
% 
% txt = sprintf('Abs Err = %.2f\nRMS Err = %.2f', MAE, RMSE);
% text( z(1)+0.05*diff(z), z(2)-0.05*diff(z), txt, ...
%       'FontSize',12, 'BackgroundColor','w', 'EdgeColor','k');


% Scatter plot
hold on

% Plot each TF group separately with different colors
scatter(x_data(geneIdx), y_data(geneIdx), 20, colors{1}, 'filled')
% scatter(x_data(validatedIdx), y_data(validatedIdx), 20, colors{2}, 'filled')
% scatter(x_data(oneTF), y_data(oneTF), 20, colors{1}, 'filled')
% scatter(x_data(twoTF), y_data(twoTF), 20, colors{2}, 'filled')
% scatter(x_data(multiTF), y_data(multiTF), 20, colors{3}, 'filled')


% Plot identity line
plot(z(1):0.1:z(2), z(1):0.1:z(2), 'k--', 'LineWidth', 2) 


% % Linear regression (least squares fit)
% m = dot(x_data(geneIdx), y_data(geneIdx)) / dot(x_data(geneIdx), x_data(geneIdx));
% x_fit = linspace(z(1), z(2), 100);
% y_fit = m * x_fit;
% plot(x_fit, y_fit, 'r--', 'LineWidth', 1)


% % Total Least Squares Regression (Y-int = 0)
% M = [x_data, y_data]; % data Matrix
% [~, ~, V] = svd(M, 0); % principal direction of maximum variance
% v = V(:,1);
% m = v(2)/v(1); %slope
% x_fit = linspace(z(1), z(2), 100);
% y_fit = m * x_fit;
% plot(x_fit, y_fit, 'r--', 'LineWidth', 1)
% mexp = m;
% 
% 
% % Pearson correlation coefficient
% R = corrcoef(y_data, x_data);
% r_val = R(1,2);
% r_squared = r_val^2;


% Axis labels, title
xlabel('Experimental $\log_{2}$ (FC * mRNA Base Counts)', 'Interpreter', 'latex')
ylabel('Model $\log_{2}$ (FC * mRNA Base Counts)', 'Interpreter', 'latex')
title('B: Comparing $\log_{2}$ (FC * mRNA Base Counts)', 'Interpreter', 'latex')
xlim([z(1) z(2)])
ylim([z(1) z(2)])
grid on

% Legend with regression and Pearson stats
legend({...
    'All Genes', ...
    'Unity'}, ...
    'Location', 'southeast')

hold off


% Subplot 2: Normal Longitudinal Run, No mRNA Base Counts, SS = 0.315
z = [-6, 6];

subplot(1,2,1)
y_data = log2(ylong_4h);
x_data = log2(y4h_norm);

% 1) Compute error vectors
err = y_data - x_data;           % signed error
abs_err = abs(err);              % absolute error
sq_err  = err.^2;                % squared error

% 2) Compute metrics
% MAE  = mean(abs_err);            % Mean absolute error
% RMSE = sqrt( mean(sq_err) );     % Root-mean-square error
% 
% % display in command window
% fprintf('Mean Absolute Error (log2FC)  = %.4f\n', MAE);
% fprintf('RMS Error (log2FC) = %.4f\n', RMSE);
% 
% txt = sprintf('Abs Err = %.2f\nRMS Err = %.2f', MAE, RMSE);
% text( z(1)+0.05*diff(z), z(2)-0.05*diff(z), txt, ...
%       'FontSize',12, 'BackgroundColor','w', 'EdgeColor','k');


% Scatter plot
hold on

% Plot each TF group separately with different colors
scatter(x_data(geneIdx), y_data(geneIdx), 20, colors{1}, 'filled')
% scatter(x_data(validatedIdx), y_data(validatedIdx), 20, colors{2}, 'filled')
% scatter(x_data(oneTF), y_data(oneTF), 20, colors{1}, 'filled')
% scatter(x_data(twoTF), y_data(twoTF), 20, colors{2}, 'filled')
% scatter(x_data(multiTF), y_data(multiTF), 20, colors{3}, 'filled')


% Plot identity line
plot(z(1):0.1:z(2), z(1):0.1:z(2), 'k--', 'LineWidth', 2) 

% x_vals = z(1):0.1:z(2);
% plot(x_vals, x_vals - 0.5, 'k--', ...
%      'LineWidth', 1.0, 'HandleVisibility','off');
% plot(x_vals, x_vals + 0.5, 'k--', ...
%      'LineWidth', 1.0, 'HandleVisibility','off');

% Total Least Squares Regression (Y-int = 0)
% M = [x_data, y_data]; % data Matrix
% [~, ~, V] = svd(M, 0); % principal direction of maximum variance
% v = V(:,1);
% m = v(2)/v(1); %slope
% x_fit = linspace(z(1), z(2), 100);
% y_fit = m * x_fit;
% plot(x_fit, y_fit, 'r--', 'LineWidth', 1)

% mlong = m;


% Axis labels, title
xlabel('Experimental $\log_{2}$ FC', 'Interpreter', 'latex')
ylabel('Model $\log_{2}$ FC', 'Interpreter', 'latex')
title('A: Comparing $\log_{2}$ FC', 'Interpreter', 'latex')
xlim([z(1) z(2)])
ylim([z(1) z(2)])
grid on

% Legend with regression and Pearson stats
legend({...
    'All Genes', ...
    'Unity'}, ...
    'Location', 'southeast')


hold off



sgtitle(sprintf('Data vs. Model Predicted Fold-Change (Longitudinal Stretch, 4h), Baseline = %.3f, Activated = %.3f', S_in(1), S_in(2)), 'Interpreter', 'latex')



%% Scatterplot 2: Transverse Stretch

% figure('Position', [100, 100, 1600, 600])
% 
% % Subplot 1: Transverse Stretched (4h)
% subplot(1,2,2)
% y_data = log2(ytrans_4h);
% x_data = log2(y4h_MA_trans);
% 
% 
% % Scatter plot
% hold on
% 
% % Plot each TF group separately with different colors
% scatter(x_data(oneTF), y_data(oneTF), 20, colors{1}, 'filled')
% scatter(x_data(twoTF), y_data(twoTF), 20, colors{2}, 'filled')
% scatter(x_data(multiTF), y_data(multiTF), 20, colors{3}, 'filled')
% sig_oneTF_trans = intersect(sigIdxtrans, oneTF);
% % scatter(x_data(sig_oneTF_trans), y_data(sig_oneTF_trans), ...
% %         20, 'r') (for when you want to show significantly-expressed species)
% 
% % scatter(x_data(targetGeneIdx), y_data(targetGeneIdx), 20, colors{3}, 'filled')
% 
% % Plot identity line
% plot(-z:0.1:z, -z:0.1:z, 'k--', 'LineWidth', 2) 
% 
% % Linear regression (least squares fit)
% m = dot(x_data, y_data) / dot(x_data, x_data);
% x_fit = linspace(-z, z, 100);
% y_fit = m * x_fit;
% plot(x_fit, y_fit, 'r--', 'LineWidth', 1)
% 
% mtrans = m;
% 
% % Pearson correlation coefficient
% R = corrcoef(y_data, x_data);
% r_val = R(1,2);
% r_squared = r_val^2;
% 
% 
% % Axis labels, title
% xlabel('Experimental $\log_{2}$ Fold-Change', 'Interpreter', 'latex')
% ylabel('Model $\log_{2}$ Fold-Change', 'Interpreter', 'latex')
% title('Transverse Stretched $\log_{2}$ Fold-Change (4h)', 'Interpreter', 'latex')
% xlim([-z z])
% ylim([-z z])
% grid on
% 
% % Legend with regression and Pearson stats
% legend({...
%     'One Regulator', ...
%     'Two Regulators', ...
%     'Three+ Regulators', ...
%     'Unity', ...
%     sprintf('Best Fit: y = %.2fx\nR^2 = %.2f', m, r_squared)}, ...
%     'Location', 'best')
% 
%     % 'One Regulator (Sig.)', ... (for when you want to show significantly-expressed species)
% hold off
% 
% % Subplot 2: Transverse Stretched (30m)
% subplot(1,2,1)
% y_data = log2(ytrans_30m);
% x_data = log2(y30m_MA_trans);
% 
% % Scatter plot
% hold on
% 
% % Plot each TF group separately with different colors
% scatter(x_data(oneTF), y_data(oneTF), 20, colors{1}, 'filled')
% scatter(x_data(twoTF), y_data(twoTF), 20, colors{2}, 'filled')
% scatter(x_data(multiTF), y_data(multiTF), 20, colors{3}, 'filled')
% % scatter(y_data(targetGeneIdx), x_data(targetGeneIdx), 20, colors{3}, 'filled')
% 
% % Plot identity line
% plot(-z:0.1:z, -z:0.1:z, 'k--', 'LineWidth', 2) 
% 
% % Linear regression (least squares fit)
% m = dot(x_data, y_data) / dot(x_data, x_data);
% x_fit = linspace(-z, z, 100);
% y_fit = m * x_fit;
% plot(x_fit, y_fit, 'r--', 'LineWidth', 1)
% 
% % Pearson correlation coefficient
% R = corrcoef(y_data, x_data);
% r_val = R(1,2);
% r_squared = r_val^2;
% 
% 
% % Axis labels, title
% xlabel('Experimental $\log_{2}$ Fold-Change', 'Interpreter', 'latex')
% ylabel('Model $\log_{2}$ Fold-Change', 'Interpreter', 'latex')
% title('Transverse Stretched $\log_{2}$ Fold-Change (30m)', 'Interpreter', 'latex')
% xlim([-z z])
% ylim([-z z])
% grid on
% 
% % Legend with regression and Pearson stats
% legend({...
%     'One Regulator', ...
%     'Two Regulators', ...
%     'Three+ Regulators', ...
%     'Unity', ...
%     sprintf('Best Fit: y = %.2fx\nR^2 = %.2f', m, r_squared)}, ...
%     'Location', 'best')
% 
% hold off
% 
% sgtitle('Model vs Experimental Predicted Fold-Change (Transverse Stretch)', 'Interpreter', 'latex')

%% Testing Parameter Changes: Blanket EC50 Change

% EC1 = 0.50;
% EC2 = 0.53;
% EC3 = 0.45;
% tfRxn = [24, 38, 44, 45, 46, 47, 48, 55, 56, 64, 65, 66, 67, ...
%     68, 71, 72, 73, 79, 80];
% feedbackRxn = 908:921;
% rpar(3, tfRxn) = EC2; %changing EC50 for all general TF reactions
% rpar(3, feedbackRxn) = EC3; %changing EC50 for all feedback TF rxn
% rpar(2, feedbackRxn) = 1.0; %changing n for all feedback TF rxn
% params{1} = rpar;



% y0_new(stimIdx) = S_in(2);
% [t4, y4] = ode15s(@NetfluxODE_CaoS, tspan, y0_new, [], params, S_in(2));
% 
% % Normalize longitudinal outputs by steady state
% [ylong_4h, ylong_30m, y4norm] = ODENorm(t4, y4, ss, geneIdx);
% 
% y0_new(stimIdx) = S_in(3);
% [t5, y5] = ode15s(@NetfluxODE_CaoS, tspan, y0_new, [], params, S_in(3));
% 
% % Normalize transverse outputs by steady state
% [ytrans_4h, ytrans_30m, y5norm] = ODENorm(t5, y5, ss, geneIdx);


% Testing with new baseline SS state
[t6, y6] = ode15s(@NetfluxODE_CaoS, tspan1, y0, [], params, S_in(4));
ss = y6(end, :)'; % End ouputs from SS model
y0_new2 = ss;

% Longitudinal Stretch
y0_new2(stimIdx) = S_in(1);
[t5, y5] = ode15s(@NetfluxODE_CaoS, tspan, y0_new2, [], params, S_in(2));

% Normalize longitudinal outputs by steady state
[ylong_4h_newSS, ylong_30m_newSS, y8norm] = ODENorm(t5, y5, ss, geneIdx);


% %Transverse Stretch
% y0_new2(stimIdx) = S_in(3);
% [t7, y7] = ode15s(@NetfluxODE_CaoS, tspan, y0_new2, [], params, S_in(3));
% 
% % Normalize transverse outputs by steady state
% [ytrans_4h_newSS, ytrans_30m_newSS, y7norm] = ODENorm(t7, y7, ss, geneIdx);




%% Scatterplot 3: Baseline SS Changes

figure('Position', [100, 100, 3000, 600])

z = [0, 20];

% Subplot 1: Longitudinal Stretched (4h), Original SS = 0.315
subplot(1,2,1)
y_data = log2(ylong_4h.*y0_MA);
x_data = log2(y4h_norm.*y0_MA);
% y_data = log2(ylong_4h);
% x_data = log2(y4h_norm);

% Scatter plot
hold on

% 1) Compute error vectors
err = y_data(DE_4h_more) - x_data(DE_4h_more);    % signed error
sq_err  = err.^2;


% 2) Compute metrics
MSEa  = mean(err);            % Mean signed error
RMSEa = sqrt( mean(sq_err) );     % Root-mean-square error

txt = sprintf('MSE (DE) = %.2f\nRMS Err (DE) = %.2f', MSEa, RMSEa);
text( z(1)+0.05*diff(z), z(2)-0.05*diff(z), txt, ...
      'FontSize',12, 'BackgroundColor','w', 'EdgeColor','k');

% Plot each TF group separately with different colors
scatter(x_data(geneIdx), y_data(geneIdx), 20, colors{1}, 'filled')
scatter(x_data(DE_4h_more), y_data(DE_4h_more), 20, colors{2}, 'filled')

% Plot identity line
plot(z(1):0.1:z(2), z(1):0.1:z(2), 'k--', 'LineWidth', 2) 

x_vals = z(1):0.1:z(2);
plot(x_vals, x_vals - 0.5, 'k--', ...
     'LineWidth', 1.0, 'HandleVisibility','off');
plot(x_vals, x_vals + 0.5, 'k--', ...
     'LineWidth', 1.0, 'HandleVisibility','off');

% Linear regression (least squares fit)
mlin1 = dot(x_data, y_data) / dot(x_data, x_data);

% Total Least Squares Regression (Y-int = 0)
M = [x_data(DE_4h_more), y_data(DE_4h_more)]; % data Matrix
[~, ~, V] = svd(M, 0); % principal direction of maximum variance
v = V(:,1);
m = v(2)/v(1); %slope
x_fit = linspace(z(1), z(2), 100);
y_fit = m * x_fit;
plot(x_fit, y_fit, 'r--', 'LineWidth', 1)

mlong = m;

% Axis labels, title
% xlabel('Experimental $\log_{2} FC$', 'Interpreter', 'latex')
% ylabel('Model $\log_{2} FC$', 'Interpreter', 'latex')
xlabel('Experimental $\log_{2} (FC * mRNACounts)$', 'Interpreter', 'latex')
ylabel('Model $\log_{2} (FC * mRNACounts)$', 'Interpreter', 'latex')
% title(sprintf('Longitudinally Stretched $log_{2} FC$ (4h): SS = %.3f', S_in(1)), 'Interpreter', 'latex')
title(sprintf('Longitudinally Stretched $log_{2} (FC * mRNACounts)$ (4h): SS = %.3f', S_in(1)), 'Interpreter', 'latex')

xlim([z(1) z(2)])
ylim([z(1) z(2)])
grid on

% Legend with regression and Pearson stats
legend({...
    'All Genes', ...
    'DE Genes', ...
    'Unity', ...
    sprintf('TLS Fit (Zero Int): y = %.2fx', m)}, ...
    'Location', 'southeast')

hold off

% Subplot 2: Longitudinal Stretched (4h), New SS
subplot(1,2,2)

subplot(1,2,2)
y_data = log2(ylong_4h_newSS.*y0_MA);
x_data = log2(y4h_norm.*y0_MA);
% y_data = log2(ylong_4h_newSS);
% x_data = log2(y4h_norm);

% 1) Compute error vectors
err = y_data(DE_4h_more) - x_data(DE_4h_more);           % signed error
sq_err  = err.^2;

% 2) Compute metrics
MSEb  = mean(err);            % Mean signed error
RMSEb = sqrt( mean(sq_err) );     % Root-mean-square error

txt = sprintf('MSE (DE) = %.2f\nRMS Err (DE) = %.2f', MSEb, RMSEb);
text( z(1)+0.05*diff(z), z(2)-0.05*diff(z), txt, ...
      'FontSize',12, 'BackgroundColor','w', 'EdgeColor','k');

% Scatter plot
hold on

% Plot each TF group separately with different colors
scatter(x_data(geneIdx), y_data(geneIdx), 20, colors{1}, 'filled')
scatter(x_data(DE_4h_more), y_data(DE_4h_more), 20, colors{2}, 'filled')


% Plot identity line
plot(z(1):0.1:z(2), z(1):0.1:z(2), 'k--', 'LineWidth', 2) 

x_vals = z(1):0.1:z(2);
plot(x_vals, x_vals - 0.5, 'k--', ...
     'LineWidth', 1.0, 'HandleVisibility','off');
plot(x_vals, x_vals + 0.5, 'k--', ...
     'LineWidth', 1.0, 'HandleVisibility','off');

% Linear regression (least squares fit)
mlin2 = dot(x_data, y_data) / dot(x_data, x_data);

% Total Least Squares Regression (Y-int = 0)
M = [x_data(DE_4h_more), y_data(DE_4h_more)]; % data Matrix
[~, ~, V] = svd(M, 0); % principal direction of maximum variance
v = V(:,1);
m = v(2)/v(1); %slope
x_fit = linspace(z(1), z(2), 100);
y_fit = m * x_fit;
plot(x_fit, y_fit, 'r--', 'LineWidth', 1)

mlongchange = m;


% Axis labels, title
% xlabel('Experimental $\log_{2} FC$', 'Interpreter', 'latex')
% ylabel('Model $\log_{2} FC$', 'Interpreter', 'latex')
xlabel('Experimental $\log_{2} (FC * mRNACounts)$', 'Interpreter', 'latex')
ylabel('Model $\log_{2} (FC * mRNACounts)$', 'Interpreter', 'latex')
% title(sprintf('Longitudinally Stretched $log_{2} FC$ (4h): SS = %.3f', S_in(4)), 'Interpreter', 'latex')
title(sprintf('Longitudinally Stretched $log_{2} (FC * mRNACounts)$ (4h): SS = %.3f', S_in(4)), 'Interpreter', 'latex')

xlim([z(1) z(2)])
ylim([z(1) z(2)])
grid on

% Legend with regression and Pearson stats
legend({...
    'All Genes', ...
    'DE Genes', ...
    'Unity', ...
     sprintf('TLS Fit (Zero Int): y = %.2fx', m)}, ...
    'Location', 'southeast')

hold off

sgtitle(sprintf('4hr Longitudinal Stretch, Comparing Steady States, Stim = %.3f', S_in(2)), 'Interpreter', 'latex')


%% Error Calculation: Fold-Change


% Average Comparisons: Longitudinal Stretch
averages = [mean(y4h_norm), mean(ylong_4h), mean(ylong_4h_newSS)];



% % Average Comparisons: Transverse Stretch
% averages = [mean(y4h_MA_trans), mean(ytrans_4h), mean(ytrans_4h_newSS)];
% disp(['Average 4h Trans FC (Experimental): ', num2str(averages(1))]);
% disp(['Average 4h Trans FC (Model, Unchanged): ', num2str(averages(2))]);
% disp(['Average 4h Trans FC (Model, Changed): ', num2str(averages(3))]);

% Old SS
err = ylong_4h - y4h_norm;
sq_err = err.^2;
MSE1  = mean(err);            % Mean signed error
RMSE1 = sqrt( mean(sq_err) );     % Root-mean-square error

% New SS
err = ylong_4h_newSS - y4h_norm;
sq_err = err.^2;
MSE2  = mean(err);            % Mean signed error
RMSE2 = sqrt( mean(sq_err) );     % Root-mean-square error

fprintf('\nLongitudinal Stretch (4h), Experimental RNA-seq Data\n')
disp(['Average (FC) (Experimental): ', num2str(averages(1))]);
disp(['TLS (log2Expression) Fit Line Slope (Experimental): ', num2str(mexp)]);


fprintf('\nLongitudinal Stretch (4h), Old SS = %.3f\n', S_in(1))
fprintf('Mean Signed Error (FC), Old SS  = %.4f\n', MSE1);
fprintf('RMS Error (FC), Old SS  = %.4f\n', RMSE1);
disp(['Average (FC) (Model, Old SS): ', num2str(averages(2))]);
fprintf('Mean Signed Error (log2FC), Old SS  = %.4f\n', MSEa);
fprintf('RMS Error (log2FC), Old SS = %.4f\n', RMSEa);
disp([sprintf('TLS (log2FC) Fit Line Slope: DE Genes (SS = %.3f): ', S_in(1)), num2str(mlong)]);
disp([sprintf('LS (log2FC) Fit Line Slope: DE Genes (SS = %.3f): ', S_in(1)), num2str(mlin1)]);



fprintf('\nLongitudinal Stretch (4h), New SS = %.3f\n', S_in(4))
fprintf('Mean Signed Error (FC), New SS  = %.4f\n', MSE2);
fprintf('RMS Error (FC), New SS  = %.4f\n', RMSE2);
disp(['Average (FC) (Model, New SS): ', num2str(averages(3))]);
fprintf('Mean Signed Error (log2FC), New SS  = %.4f\n', MSEb);
fprintf('RMS Error (log2FC), New SS = %.4f\n', RMSEb);
disp([sprintf('TLS (log2FC) Fit Line Slope: DE Genes (SS = %.3f): ', S_in(4)), num2str(mlongchange)]);
disp([sprintf('LS (log2FC) Fit Line Slope: DE Genes (SS = %.3f): ', S_in(4)), num2str(mlin2)]);


% Error Plots Based on SS:


% % Linear regression (least squares fit)



%% Scatterplot 4: Significantly Expressed Genes

% figure('Position', [100, 100, 3000, 600])
% z = [-3, 3];
% 
% % Subplot 1: DE Genes
% 
% subplot(1,2,1)
% y_data = log2(ylong_4h_newSS);
% x_data = log2(y4h_norm);
% 
% % Scatter plot
% hold on
% 
% % 1) Compute error vectors
% err = y_data - x_data;           % signed error
% abs_err = abs(err);              % absolute error
% sq_err  = err.^2;                % squared error
% 
% % 2) Compute metrics
% % MAE  = mean(abs_err);            % Mean absolute error
% % RMSE = sqrt( mean(sq_err) );     % Root-mean-square error
% % 
% % % display in command window
% % fprintf('Mean Absolute Error (log2FC), Old SS  = %.4f\n', MAE);
% % fprintf('RMS Error (log2FC), Old SS = %.4f\n', RMSE);
% % 
% % txt = sprintf('Abs Err = %.2f\nRMS Err = %.2f', MAE, RMSE);
% % text( z(1)+0.05*diff(z), z(2)-0.05*diff(z), txt, ...
% %       'FontSize',12, 'BackgroundColor','w', 'EdgeColor','k');
% 
% % Plot each TF group separately with different colors
% scatter(x_data(geneIdx), y_data(geneIdx), 20, colors{1}, 'filled')
% scatter(x_data(DE_4h_more), y_data(DE_4h_more), 20, colors{2}, 'filled')
% 
% % Plot identity line
% plot(z(1):0.1:z(2), z(1):0.1:z(2), 'k--', 'LineWidth', 2) 
% 
% x_vals = z(1):0.1:z(2);
% plot(x_vals, x_vals - 0.5, 'k--', ...
%      'LineWidth', 1.0, 'HandleVisibility','off');
% plot(x_vals, x_vals + 0.5, 'k--', ...
%      'LineWidth', 1.0, 'HandleVisibility','off');
% 
% 
% % % Total Least Squares Regression (Y-int = 0)
% % M = [x_data, y_data]; % data Matrix
% % [~, ~, V] = svd(M, 0); % principal direction of maximum variance
% % v = V(:,1);
% % m = v(2)/v(1); %slope
% x_fit = linspace(z(1), z(2), 100);
% y_fit = mlongchange * x_fit;
% plot(x_fit, y_fit, 'r--', 'LineWidth', 1)
% 
% 
% % Axis labels, title
% xlabel('Experimental $\log_{2} FC$', 'Interpreter', 'latex')
% ylabel('Model $\log_{2} FC$', 'Interpreter', 'latex')
% title(sprintf('Longitudinally Stretched $log_{2} FC$ (4h): SS = %.3f', S_in(4)), 'Interpreter', 'latex')
% xlim([z(1) z(2)])
% ylim([z(1) z(2)])
% grid on
% 
% % Legend with regression and Pearson stats
% legend({...
%     'All Genes', ...
%     'DE Genes', ...
%     'Unity', ...
%     sprintf('TLS Fit (Zero Int): y = %.2fx', m)}, ...
%     'Location', 'southeast')
% 
% hold off
% 
% % Subplot 2: Number of TFs Plot
% subplot(1,2,2)
% 
% y_data = log2(ylong_4h_newSS);
% x_data = log2(y4h_norm);
% 
% % 1) Compute error vectors
% err = y_data - x_data;           % signed error
% abs_err = abs(err);              % absolute error
% sq_err  = err.^2;                % squared error
% 
% % 2) Compute metrics
% % MAE  = mean(abs_err);            % Mean absolute error
% % RMSE = sqrt( mean(sq_err) );     % Root-mean-square error
% % 
% % % display in command window
% % fprintf('Mean Absolute Error (log2FC), New SS  = %.4f\n', MAE);
% % fprintf('RMS Error (log2FC), New SS = %.4f\n', RMSE);
% % 
% % txt = sprintf('Abs Err = %.2f\nRMS Err = %.2f', MAE, RMSE);
% % text( z(1)+0.05*diff(z), z(2)-0.05*diff(z), txt, ...
% %       'FontSize',12, 'BackgroundColor','w', 'EdgeColor','k');
% 
% % Scatter plot
% hold on
% 
% % Plot each TF group separately with different colors
% scatter(x_data(oneTF), y_data(oneTF), 20, colors{1}, 'filled')
% scatter(x_data(twoTF), y_data(twoTF), 20, colors{2}, 'filled')
% scatter(x_data(multiTF), y_data(multiTF), 20, colors{3}, 'filled')
% 
% 
% % Plot identity line
% plot(z(1):0.1:z(2), z(1):0.1:z(2), 'k--', 'LineWidth', 2) 
% 
% x_vals = z(1):0.1:z(2);
% plot(x_vals, x_vals - 0.5, 'k--', ...
%      'LineWidth', 1.0, 'HandleVisibility','off');
% plot(x_vals, x_vals + 0.5, 'k--', ...
%      'LineWidth', 1.0, 'HandleVisibility','off');
% 
% 
% % % Total Least Squares Regression (Y-int = 0)
% % M = [x_data, y_data]; % data Matrix
% % [~, ~, V] = svd(M, 0); % principal direction of maximum variance
% % v = V(:,1);
% % m = v(2)/v(1); %slope
% x_fit = linspace(z(1), z(2), 100);
% y_fit = mlongchange * x_fit;
% plot(x_fit, y_fit, 'r--', 'LineWidth', 1)
% 
% 
% % Pearson correlation coefficient
% R = corrcoef(y_data, x_data);
% r_val = R(1,2);
% r_squared = r_val^2;
% 
% 
% % Axis labels, title
% xlabel('Experimental $\log_{2} FC$', 'Interpreter', 'latex')
% ylabel('Model $\log_{2} FC$', 'Interpreter', 'latex')
% title(sprintf('Longitudinally Stretched $log_{2} FC$ (4h): SS = %.3f', S_in(4)), 'Interpreter', 'latex')
% xlim([z(1) z(2)])
% ylim([z(1) z(2)])
% grid on
% 
% % Legend with regression and Pearson stats
% legend({...
%     'One Regulator', ...
%     'Two Regulators', ...
%     'Three+ Regulators', ...
%     'Unity', ...
%     sprintf('TLS Fit (Zero Int): y = %.2fx', m)}, ...
%     'Location', 'southeast')
% 
% hold off
% 
% sgtitle(sprintf('4hr Longitudinal Stretch, Comparing DE Genes, Stim = %.3f', S_in(2)), 'Interpreter', 'latex')


%% Functions

% Normalization of genes by SS value (FC)
function [yout_4h, yout_30m, ynorm] = ODENorm(t_in, y_in, ss, geneIdx)
ynorm = y_in;
ynorm(:, geneIdx) = y_in(:, geneIdx) ./ ss(geneIdx)';
yout_4h = ynorm(find(t_in >= 240, 1), :)';
yout_30m = ynorm(find(t_in >= 30, 1), :)';
end

function sigIdx = GetSigGeneIdx_CaoS(ynormval, geneIdx)
    fc_thresh = sqrt(2);
    geneVals = ynormval(geneIdx);
    sigMask = (geneVals > fc_thresh) | (geneVals < 1/fc_thresh);
    sigIdx = geneIdx(sigMask);
end
% 
% normZ = real(y2b)
% normZ(:, geneIdx) = real(y2b(:, geneIdx)) ./ real(ss(geneIdx));
% normZ4h = normZ(find(t2b >= 240, 1), :)'
% normZ4h == ylong_4h